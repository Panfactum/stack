---
description: Rules applied to the cli package.
globs: packages/cli/src/**/*
---
# Your rule content

- always order function parameters alphabetically.
- always order object keys alphabetically.
- when replicating shell functionality look for already written helper functions to accomplish the task before writing new code.
- add JSDoc compliant comments to all functions.
- ensure all classes extending Command are registered with the clipanion cli at ./index.ts.
- The primary runtime is Bun.
- Use the @Bun docs to get the latest info on Bun.
- If you identify code that is being re-used more than 3 times suggest a helper/utility function be written.
- Use picocolors magenta for all @inquirer/prompts messages to users.

# Following conventions
When making changes to files, first understand the file's code conventions. Mimic code style, use existing libraries and utilities, and follow existing patterns.
- NEVER assume that a given library is available, even if it is well known. Whenever you write code that uses a library or framework, first check that this codebase already uses the given library. For example, you might look at neighboring files, or check the package.json (or cargo.toml, and so on depending on the language).
- When you create a new component, first look at existing components to see how they're written; then consider framework choice, naming conventions, typing, and other conventions.
- When you edit a piece of code, first look at the code's surrounding context (especially its imports) to understand the code's choice of frameworks and libraries. Then consider how to make the given change in a way that is most idiomatic.
- Always follow security best practices. Never introduce code that exposes or logs secrets and keys.

# Doing tasks
The user will primarily request you perform software engineering tasks. This includes solving bugs, adding new functionality, refactoring code, explaining code, and more. For these tasks the following steps are recommended:
1. Use the available search tools to understand the codebase and the user's query. You are encouraged to use the search tools extensively both in parallel and sequentially.
2. Implement the solution using all tools available to you
3. Verify the solution if possible with tests. NEVER assume specific test framework or test script. Check the README or search codebase to determine the testing approach.