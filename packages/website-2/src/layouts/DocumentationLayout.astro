---
import '../styles/global.css'
import { ClientRouter } from 'astro:transitions'
import { HeaderNav } from '@/components/layout/header-nav'
import { Suspense } from 'react'
import { DocsSidebar } from '@/components/documentation/DocsSidebar'
import { buildBreadCrumbRoot } from '../components/documentation/DocsSidebar/SideNavVersions'

const pathname = new URL(Astro.request.url).pathname
const hasBorder = Astro.props.hasBorder ? Astro.props.hasBorder : false
const headings = Astro.props.headings || []

const { redirect } = Astro.props

function depthPadding(depth: number) {
  if (depth === 1) {
    return 'pl-0'
  } else if (depth === 2) {
    return 'pl-md'
  } else if (depth === 3) {
    return 'pl-xl'
  } else if (depth === 4) {
    return 'pl-3xl'
  } else if (depth === 5) {
    return 'pl-4xl'
  } else {
    return 'pl-5xl'
  }
}

const breadcrumbs = buildBreadCrumbRoot(Astro.props.versionedSections, pathname)
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="generator" content={Astro.generator} />

    {
      redirect ? (
        <meta http-equiv="refresh" content={`0; url=${redirect}`} />
      ) : null
    }

    <title>{Astro.props.title}</title>

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap"
      rel="stylesheet"
    />

    <script
      src="https://kit.fontawesome.com/5a37fe5150.js"
      crossorigin="anonymous"></script>
    <ClientRouter />
  </head>

  <body class="font-inter bg-primary text-primary">
    <div
      class="fixed top-0 left-0 top-nav h-[80px] w-full bg-white dark:bg-primary z-50"
    >
      <HeaderNav
        currentPath={pathname}
        client:load
        darkBackground={Astro.props.darkBackground}
        hasBorder={hasBorder}
        transition:persist
      />

      <slot name="hero" />
    </div>

    <div
      class="mx-auto flex flex-col lg:flex-row items-start h-full z-content-fixed-navigation"
      style={{ minHeight: `calc(100vh - 80px)`, maxWidth: `1440px` }}
    >
      <nav
        class="pt-[80px] lg:pt-0 lg:fixed lg:top-[80px] h-auto lg:h-[calc(100vh-80px)] doc-nav flex-none w-full lg:w-[324px]"
      >
        <aside class="hidden crumbs">
          {
            breadcrumbs.map((crumb, index) => (
              <span class="text-black">{crumb}</span>
            ))
          }
        </aside>
        <Suspense>
          <DocsSidebar
            client:only
            currentPath={pathname}
            basePath="/docs"
            versionedSections={Astro.props.versionedSections}
          />
        </Suspense>

        <script src="./persist-sidebar-scroll.ts"></script>
      </nav>
      <div
        style={{ '--sidebar-width': headings ? 0 : undefined }}
        class={`w-full py-[24px] overflow-auto h-full pl-0 lg:pl-[324px] pt-16 sm:pt-8 lg:pt-[80px]`}
      >
        <article
          style={{ '--sidebar-width': !headings ? 0 : undefined }}
          class={`content xl:w-[calc(100%-var(--sidebar-width))] py-[24px] px-[16px] lg:px-[32px] md:border-l border-secondary overflow-auto h-full`}
        >
          <slot />
        </article>
      </div>

      <div
        class="article-nav-links hidden xl:block min-w-[300px] max-w-[312px] flex-none pt-[80px] sticky top-[0px]"
      >
        {
          headings.length ? (
            <div
              slot="article-nav-links"
              class="hidden xl:flex flex-col gap-y-[16px] border-l border-secondary py-[24px] px-[16px] lg:px-[32px]"
            >
              <span class="font-semibold text-md">On this page</span>

              <ul class="flex flex-col gap-y-xs">
                {headings
                  ?.filter((heading) => heading.depth > 1)
                  .map((heading) => (
                    <li class="flex items-center min-h-[20px] py-md text-sm text-quaternary font-semibold">
                      <a
                        href={`#${heading.slug}`}
                        class={`${depthPadding(heading.depth) - 1}`}
                      >
                        {heading.text}
                      </a>
                    </li>
                  ))}
              </ul>
            </div>
          ) : null
        }
      </div>
    </div>
  </body>
</html>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const adjustScroll = () => {
      const hash = window.location.hash
      if (hash) {
        const element = document.querySelector(hash)
        if (element) {
          window.scrollTo({
            top: element.offsetTop - 100, // Adjust this value to match your fixed nav height
            behavior: 'smooth',
          })
        }
      }
    }
    window.addEventListener('popstate', adjustScroll)
    window.addEventListener('hashchange', adjustScroll)
    adjustScroll() // Adjust scroll on initial load if there's a hash
  })
</script>
