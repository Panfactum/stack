// Command for getting database credentials from Vault
// Replicates the functionality of pf-get-db-creds.sh script

import { Command, Option } from 'clipanion';
import { PanfactumCommand } from '@/util/command/panfactumCommand';
import { getDBCreds, getDbCredsFormatted } from '@/util/vault/getDBCreds.ts';

export class GetDbCredsCommand extends PanfactumCommand {
  static override paths = [['vault', 'get-db-creds']];

  static override usage = Command.Usage({
    description: 'Get database credentials from Vault for a specific role',
    category: 'Vault',
    details: `
      This command retrieves database credentials from Vault's database secrets engine.
      
      The credentials are dynamically generated by Vault and have a limited lease duration.
      The command will automatically handle authentication with Vault.
    `,
    examples: [
      ['Get database credentials for a role', 'pf vault get-db-creds --role my-app'],
      ['Get credentials with specific Vault address', 'pf vault get-db-creds --role my-app --vault-address https://vault.example.com'],
      ['Get credentials in JSON format', 'pf vault get-db-creds --role my-app --json'],
    ],
  });

  role = Option.String('-r,--role', {
    description: 'The database role to request credentials for',
    required: true,
  });

  vaultAddress = Option.String('-a,--vault-address', {
    description: 'The Vault address to connect to (defaults to VAULT_ADDR if not set)',
  });

  json = Option.Boolean('-j,--json', false, {
    description: 'Output credentials in JSON format instead of table format',
  });

  async execute() {
    try {
      if (this.json) {
        // Output as JSON
        const creds = await getDBCreds({
          context:  this.context,
          role: this.role,
          vaultAddress: this.vaultAddress,
        });
        this.context.stdout.write(JSON.stringify(creds, null, 2) + '\n');
      } else {
        // Output as formatted text (matching vault CLI output)
        const formatted = await getDbCredsFormatted({
          context: this.context,
          role: this.role,
          vaultAddress: this.vaultAddress,
        });
        this.context.stdout.write(formatted + '\n');
      }
      return 0;
    } catch (error) {
      this.context.stderr.write(`Error: ${error instanceof Error ? error.message : String(error)}\n`);
      return 1;
    }
  }
}