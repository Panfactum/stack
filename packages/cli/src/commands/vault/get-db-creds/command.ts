import { Command, Option } from 'clipanion';
import { PanfactumCommand } from '@/util/command/panfactumCommand';
import { vaultRoles } from '@/util/db/types';
import { CLIError } from '@/util/error/error';
import { getDBCreds, getDbCredsFormatted } from '@/util/vault/getDBCreds.ts';

export class GetDbCredsCommand extends PanfactumCommand {
  static override paths = [['vault', 'get-db-creds']];

  static override usage = Command.Usage({
    description: 'Get database credentials from Vault for a specific role',
    category: 'Vault',
    details: `
      This command retrieves database credentials from Vault's database secrets engine.
      
      The credentials are dynamically generated by Vault and have a limited lease duration.
      The command will automatically handle authentication with Vault.
    `,
    examples: [
      ['Get database credentials interactively', 'pf vault get-db-creds'],
      ['Get database credentials for a specific role', 'pf vault get-db-creds --role admin'],
      ['Get credentials with specific Vault address', 'pf vault get-db-creds --role reader --vault-address https://vault.example.com'],
      ['Get credentials in JSON format', 'pf vault get-db-creds --role superuser --json'],
    ],
  });

  role = Option.String('-r,--role', {
    description: 'The database role to request credentials for',
    required: false,
  });

  vaultAddress = Option.String('-a,--vault-address', {
    description: 'The Vault address to connect to (defaults to VAULT_ADDR if not set)',
  });

  json = Option.Boolean('-j,--json', false, {
    description: 'Output credentials in JSON format instead of table format',
  });

  async execute() {
    try {
      // Prompt for role if not provided
      let selectedRole = this.role;
      if (!selectedRole) {
        selectedRole = await this.context.logger.select({
          message: 'Select the database role:',
          choices: vaultRoles.map(role => ({
            value: role,
            name: role,
            description: role === 'superuser' ? 'Full database access' : 
                        role === 'admin' ? 'Administrative access' : 
                        'Read-only access'
          }))
        });
      }
      
      if (this.json) {
        // Output as JSON
        const creds = await getDBCreds({
          context:  this.context,
          role: selectedRole,
          vaultAddress: this.vaultAddress,
        });
        this.context.stdout.write(JSON.stringify(creds, null, 2) + '\n');
      } else {
        // Output as formatted text (matching vault CLI output)
        const formatted = await getDbCredsFormatted({
          context: this.context,
          role: selectedRole,
          vaultAddress: this.vaultAddress,
        });
        this.context.stdout.write(formatted + '\n');
      }
      return 0;
    } catch (error) {
      throw new CLIError(
        `Failed to get database credentials`,
        error
      );
    }
  }
}
