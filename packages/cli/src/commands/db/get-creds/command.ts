// This file defines the db get-creds command for retrieving database credentials
// It interfaces with Vault's database secrets engine for dynamic credentials

import { Command, Option } from 'clipanion';
import { PanfactumCommand } from '@/util/command/panfactumCommand';
import { vaultRoles } from '@/util/db/types';
import { CLIError } from '@/util/error/error';
import { getDBCreds, getDbCredsFormatted } from '@/util/vault/getDBCreds.ts';

/**
 * CLI command for retrieving database credentials from Vault
 * 
 * @remarks
 * This command provides access to dynamically generated database credentials
 * through HashiCorp Vault's database secrets engine. It supports multiple
 * database roles and output formats for different use cases.
 * 
 * Key features:
 * - Dynamic credential generation with limited TTL
 * - Role-based access control (reader, admin, superuser)
 * - Multiple output formats (text/JSON)
 * - Automatic Vault authentication
 * - Interactive role selection
 * 
 * Security considerations:
 * - Credentials are temporary and auto-expire
 * - Each request generates unique credentials
 * - Credentials are tied to Vault audit logs
 * - Supports principle of least privilege
 * 
 * The command integrates with Vault's database secrets engine which:
 * - Manages database user lifecycle
 * - Rotates credentials automatically
 * - Provides break-glass access patterns
 * - Ensures credential uniqueness
 * 
 * @example
 * ```bash
 * # Interactive role selection
 * pf db get-creds
 * 
 * # Get admin credentials
 * pf db get-creds --role admin
 * 
 * # Get credentials as JSON for scripting
 * CREDS=$(pf db get-creds --role reader --json)
 * USERNAME=$(echo $CREDS | jq -r .username)
 * PASSWORD=$(echo $CREDS | jq -r .password)
 * 
 * # Use with specific Vault instance
 * pf db get-creds --role superuser --vault-address https://vault.prod.example.com
 * ```
 * 
 * @see {@link getDBCreds} - Core credential retrieval logic
 * @see {@link getDbCredsFormatted} - Formatted output generation
 */
export class GetDbCredsCommand extends PanfactumCommand {
  static override paths = [['db', 'get-creds']];

  static override usage = Command.Usage({
    description: 'Get database credentials from Vault for a specific role',
    category: 'Database',
    details: `
      This command retrieves database credentials from Vault's database secrets engine.
      
      The credentials are dynamically generated by Vault and have a limited lease duration.
      The command will automatically handle authentication with Vault.
    `,
    examples: [
      ['Get database credentials interactively', 'pf db get-creds'],
      ['Get database credentials for a specific role', 'pf db get-creds --role admin'],
      ['Get credentials with specific Vault address', 'pf db get-creds --role reader --vault-address https://vault.example.com'],
      ['Get credentials in JSON format', 'pf db get-creds --role superuser --json'],
    ],
  });

  /**
   * Database role to request credentials for
   * 
   * @remarks
   * Available roles:
   * - reader: Read-only database access
   * - admin: Administrative database access
   * - superuser: Full database privileges
   */
  role = Option.String('-r,--role', {
    description: 'The database role to request credentials for',
  });

  /**
   * Vault server address override
   * 
   * @remarks
   * Defaults to VAULT_ADDR environment variable if not specified.
   * Useful for accessing different Vault instances.
   */
  vaultAddress = Option.String('-a,--vault-address', {
    description: 'The Vault address to connect to (defaults to VAULT_ADDR if not set)',
  });

  /**
   * JSON output format flag
   * 
   * @remarks
   * When enabled, outputs credentials as JSON for programmatic use.
   * Default format mimics Vault CLI output for human readability.
   */
  json = Option.Boolean('-j,--json', false, {
    description: 'Output credentials in JSON format instead of table format',
  });

  /**
   * Executes the database credential retrieval
   * 
   * @remarks
   * This method:
   * 1. Prompts for role selection if not provided
   * 2. Authenticates with Vault
   * 3. Requests dynamic database credentials
   * 4. Formats output based on JSON flag
   * 
   * The credentials returned include:
   * - Username: Dynamically generated database user
   * - Password: Secure random password
   * - TTL: Time until credentials expire
   * - Connection details: Host, port, database name
   * 
   * @returns Exit code (0 for success)
   * 
   * @throws {@link CLIError}
   * Throws when Vault authentication fails or credential generation fails
   */
  async execute() {
    try {
      // Prompt for role if not provided
      const selectedRole = this.role
        ? this.role
        : await this.context.logger.select({
            message: 'Select the database role:',
            choices: vaultRoles.map(role => ({
              value: role,
              name: role,
              description: role === 'superuser' ? 'Full database access' :
                role === 'admin' ? 'Administrative access' :
                  'Read-only access'
          }))
      });
      
      if (this.json) {
        // Output as JSON
        const creds = await getDBCreds({
          context:  this.context,
          role: selectedRole,
          vaultAddress: this.vaultAddress,
        });
        this.context.stdout.write(JSON.stringify(creds, null, 2));
      } else {
        // Output as formatted text (matching vault CLI output)
        const formatted = await getDbCredsFormatted({
          context: this.context,
          role: selectedRole,
          vaultAddress: this.vaultAddress,
        });
        this.context.stdout.write(formatted);
      }
      return 0;
    } catch (error) {
      throw new CLIError(
        `Failed to get database credentials`,
        error
      );
    }
  }
}
