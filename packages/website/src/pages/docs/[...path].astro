---
import { getCollection, render } from "astro:content";

import Layout from "@/components/layouts/docs/Layout.astro";
import type { DocsMetadata, TopLevelDocsSectionMetadata } from "@/components/layouts/docs/types";
import MarkdownAnchorTag from "@/components/markdown/MarkdownAnchorTag.astro";
import { SIDENAV_SECTIONS as MATURITY_SIDENAV_SECTIONS } from "@/content/maturity/sideNavSections";
import { DOCS_VERSIONS } from "@/lib/constants";


export async function getStaticPaths() {

  ////////////////////////////////////////////////////////////////
  // Docs
  ////////////////////////////////////////////////////////////////

  // This is a little bit of a hacky way to import the sidenavs for each docs
  // version, but works pretty well AFAIK.
  // It is necessary b/c the docs versions can change dynamically based on our releases
  // scripts and we do not want our release scripts to have to edit TS files.
  const docsMetadata = Object.fromEntries(await Promise.all(DOCS_VERSIONS.map(async ({slug}) => ([
  slug,
  (await import(`../../content/docs/${slug}/sideNavSections.ts`)).SIDENAV_SECTIONS as TopLevelDocsSectionMetadata[]
] as const))))

  const docs = await getCollection("docs");
  
  const validSlugs = DOCS_VERSIONS
    .map(v => v.slug)
    .concat(["changelog"])

  const docsPaths = docs
  .filter(doc => validSlugs.some(slug => doc.id.startsWith(slug)))
  .map((doc) => {
    return {
      params: { path: doc.id },
      props: { 
        entry: doc,
        metadata: docsMetadata
      },
    };
  })

  ////////////////////////////////////////////////////////////////
  // Maturity Model
  ////////////////////////////////////////////////////////////////
  const maturity = await getCollection("maturityModel");
  const maturityPaths = maturity
  .map((doc) => {
    return {
      params: { path: doc.id === "index" ? "/maturity" : `/maturity/${doc.id}`},
      props: { entry: doc, metadata: MATURITY_SIDENAV_SECTIONS },
    };
  })

  ////////////////////////////////////////////////////////////////
  // Return combined
  ////////////////////////////////////////////////////////////////
  return [...docsPaths, ...maturityPaths];
}

interface Props {
  entry: Parameters<typeof render>[0],
  metadata: DocsMetadata
}

const { entry, metadata } = Astro.props;
const { Content, headings } = await render(entry);

const filteredHeadings = headings.filter(({text}) => {
  return text !== "Added" && text !== "Fixed" && text !== "Breaking Changes" && text !== "Changed"
})

const headingTitle = headings.find(({depth}) => depth === 1)?.text
---

<Layout
  title={`Panfactum: ${entry.data.title || headingTitle || "Documentation"}`}
  description={entry.data.description}
  headings={filteredHeadings}
  metadata={metadata}
>
  <Content
    components={{
      a: MarkdownAnchorTag,
    }}
  />
</Layout>
